#Code1:
class car():
    pass

honda = car()
tata = car()

honda.modelname = 'City'
honda.yearm = 2017
honda.price = 1000000

tata.modelname = 'Bolt'
tata.yearm = 2016
tata.price = 600000

print(honda.price)


#Code2:
class car():
    def __init__(self,modelname,yearm,price):
        self.modelname = modelname
        self.yearm = yearm
        self.price = price

honda = car('City', 2017, 1000000)
tata = car('Bolt', 2016, 600000)

print(honda.price)


#Code3:
class car():
    def __init__(self,modelname,yearm,price):
        self.modelname = modelname
        self.yearm = yearm
        self.price = price

honda = car('City', 2017, 1000000)
tata = car('Bolt', 2016, 600000)

print(honda.__dict__)


#Inheritence
#Code1:
class car():
    def __init__(self,modelname,yearm,price):
        self.modelname = modelname
        self.yearm = yearm
        self.price = price
    def price_inc(self):
        self.price= int(self.price*1.15)

class Supercar(car):
    pass

honda = Supercar('City', 2017, 1000000)
tata = car('Bolt', 2016, 600000)

print(honda.yearm)


#code2:
class car():
    def __init__(self,modelname,yearm,price):
        self.modelname = modelname
        self.yearm = yearm
        self.price = price
    def price_inc(self):
        self.price= int(self.price*1.15)

class Supercar(car):
    def __init__(self, modelname, yearm, price, cc):
        super().__init__(modelname, yearm, price)
        self.cc=cc

honda = Supercar('City',2017,1000000,1500)
tata = car('Bolt', 2016, 600000)

print(honda.yearm)
print(honda.cc)


#__init__():
#code:
class Parent:
    def __init__(self,fname,fage):
        self.name=fname
        self.age=fage

    def view(self):
        print(self.name,self.age)

class Child(Parent):
    def __init__(self,fname,fage):
        Parent.__init__(self,fname,fage)
        self.lastname= "eswar"

    def view(self):
        print(self.age,self.lastname,self.name)

ob=Child(23,'python')
ob.view()


#Inheritance:
#Single:
#code:
class Parent:
    def func1(self):
        print("this is function 1")

class child(Parent):
    def func2(self):
        print("this is function 2")

ob = child()
ob.func1()


#Multiple:
#code:
class Parent:
    def func1(self):
        print("this is function 1")

class Parent2:
    def func2(self):
        print("this is function 2")

class child(Parent,Parent2):
    def func3(self):
        print("this is function 3")

ob = child()
ob.func1()
ob.func2()


#Multilevel:
#code:
class Parent:
    def func1(self):
        print("this is function 1")

class Parent2(Parent):
    def func2(self):
        print("this is function 2")

class child(Parent2):
    def func3(self):
        print("this is function 3")

ob = child()
ob.func1()
ob.func2()


#Hierarchical:
#code:
class Parent:
    def func1(self):
        print("this is function 1")

class Parent2(Parent):
    def func2(self):
        print("this is function 2")

class child(Parent):
    def func3(self):
        print("this is function 3")

ob = child()
ob1 = Parent2()
ob.func1()
ob1.func2()


#Super Function
#code:
class Parent:
    def func1(self):
        print("this is function 1")

class child(Parent):
    def func2(self):
        super().func1()
        print("this is function 2")

ob = child()
ob.func2()


#Method Overriding:
#code:
