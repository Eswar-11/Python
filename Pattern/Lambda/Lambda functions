** Lambda arguments:expression **
# code:
x=lambda a: a*a
x(3)


#Lambda within user-defined functions
#code1:
def A(x):
    return(lambda y:x+y)
t=A(4)
print(t(8))

#code2:
def A(x):
    return(lambda y:x+y)
t=A(4)
print(t(8))
u=A(7)
print(u(5))


#Lambda within filter()
#code:
mylist=[1,2,3,4,5,6]
newlist=list(filter(lambda a:(a/3==2),mylist)) #SYNTAX: filter(function, iterables)
print(newlist)


#Lambda within map()
#code:
mylist=[1,2,3,4,5,6]
newlist=list(map(lambda a:(a/3!=2),mylist)) #SYNTAX: map(function, iterables)
print(newlist)


#Lambda within reduce():
#code:
from functools import reduce
mylist=reduce(lambda a,b: a+b,[1,2,3,4,5,6]) #SYNTAX: reduce(function, sequence)
print(mylist)


#Lambda for Algebra
#Linear equations code1:
s=lambda a:a*a
print(s(4))

#Linear equations code2:
s=lambda x,y:3*x+4*y
print(s(4,7))


#Quadratic equation code:
s=lambda x,y: (x+y)**2
print(s(3,4))

